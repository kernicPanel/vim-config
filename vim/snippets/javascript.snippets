# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	var ${1:function_name} = function (${2:argument}) {
		${3:// body...}
	};
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1:true}) {
		${2}
	}${3}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	}${4}
	else {
		${3}
	}
# else if
snippet elif
	else if (${1}) {
		${2}
	}${3}
snippet el
	else {
		${1}
	}${2}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	var loopCount = ${1:Things}.length;
	for (var ${2:i} = 0; $2 < loopCount; $2${3:++}) {
		${4:$1[$2]}
	};
	delete loopCount;
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# console log
snippet log
	console.log("${1:logVar} : ", $1);${2}
# console debug
snippet debug
	console.debug("${1:debugVar} : ", $1);
	${2}
snippet test
	first test${1}
snippet testest
	second test${1}
# Module pattern
snippet module
	var ${1:module} = (function () {
		var publicAccess = {},
		${2:privateVariable} = ${3};
	
		function ${4:privateMethod}() {
			${5}
		}
	
		publicAccess.${6:moduleProperty} = ${7};
		publicAccess.${8:moduleMethod} = function () {
			${9}
		};
	
		return publicAccess;
	}());
