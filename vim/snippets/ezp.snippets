set ft=html.tpl
# Some useful Unicode entities
# Non-Breaking Space
snippet nbs
	&nbsp;
# ←
snippet left
	&#x2190;
# →
snippet right
	&#x2192;
# ↑
snippet up
	&#x2191;
# ↓
snippet down
	&#x2193;
# ↩
snippet return
	&#x21A9;
# ⇤
snippet backtab
	&#x21E4;
# ⇥
snippet tab
	&#x21E5;
# ⇧
snippet shift
	&#x21E7;
# ⌃
snippet control
	&#x2303;
# ⌅
snippet enter
	&#x2305;
# ⌘
snippet command
	&#x2318;
# ⌥
snippet option
	&#x2325;
# ⌦
snippet delete
	&#x2326;
# ⌫
snippet backspace
	&#x232B;
# ⎋
snippet escape
	&#x238B;
# Generic Doctype
snippet doctype HTML 4.01 Strict
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN""
	"http://www.w3.org/TR/html4/strict.dtd">
snippet doctype HTML 4.01 Transitional
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""
	"http://www.w3.org/TR/html4/loose.dtd">
snippet doctype HTML 5
	<!DOCTYPE HTML>
snippet doctype XHTML 1.0 Frameset
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
snippet doctype XHTML 1.0 Strict
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
snippet doctype XHTML 1.0 Transitional
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
snippet doctype XHTML 1.1
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
# HTML Doctype 4.01 Strict
snippet docts
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN""
	"http://www.w3.org/TR/html4/strict.dtd">
# HTML Doctype 4.01 Transitional
snippet doct
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""
	"http://www.w3.org/TR/html4/loose.dtd">
# HTML Doctype 5
snippet doct5
	<!DOCTYPE HTML>
# XHTML Doctype 1.0 Frameset
snippet docxf
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
# XHTML Doctype 1.0 Strict
snippet docxs
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
# XHTML Doctype 1.0 Transitional
snippet docxt
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
# XHTML Doctype 1.1
snippet docx
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
snippet html
	<html>
	${1}
	</html>
snippet xhtml
	<html xmlns="http://www.w3.org/1999/xhtml">
	${1}
	</html>
snippet body
	<body>
		${1}
	</body>
snippet head
	<head>
		<meta http-equiv="content-type" content="text/html; charset=utf-8"`Close()`>

		<title>${1:`substitute(Filename('', 'Page Title'), '^.', '\u&', '')`}</title>
		${2}
	</head>
snippet title
	<title>${1:`substitute(Filename('', 'Page Title'), '^.', '\u&', '')`}</title>${2}
snippet script
	<script type="text/javascript" charset="utf-8">
		${1}
	</script>${2}
snippet scriptsrc
	<script src="${1}.js" type="text/javascript" charset="utf-8"></script>${2}
snippet style
	<style type="text/css" media="${1:screen}">
		${2}
	</style>${3}
snippet base
	<base href="${1}" target="${2}"`Close()`>
snippet r
	<br`Close()[1:]`>
snippet div
	<div id="${1:name}">
		${2}
	</div>
# Embed QT Movie
snippet movie
	<object width="$2" height="$3" classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B"
	 codebase="http://www.apple.com/qtactivex/qtplugin.cab">
		<param name="src" value="$1"`Close()`>
		<param name="controller" value="$4"`Close()`>
		<param name="autoplay" value="$5"`Close()`>
		<embed src="${1:movie.mov}"
			width="${2:320}" height="${3:240}"
			controller="${4:true}" autoplay="${5:true}"
			scale="tofit" cache="true"
			pluginspage="http://www.apple.com/quicktime/download/"
		`Close()[1:]`>
	</object>${6}
snippet fieldset
	<fieldset id="$1">
		<legend>${1:name}</legend>

		${3}
	</fieldset>
snippet form
	<form action="${1:`Filename('$1_submit')`}" method="${2:get}" accept-charset="utf-8">
		${3}


	<p><input type="submit" value="Continue &rarr;"`Close()`></p>
	</form>
snippet h1
	<h1 id="${1:heading}">${2:$1}</h1>
snippet input
	<input type="${1:text/submit/hidden/button}" name="${2:some_name}" value="${3}"`Close()`>${4}
snippet label
	<label for="${2:$1}">${1:name}</label><input type="${3:text/submit/hidden/button}" name="${4:$2}" value="${5}" id="${6:$2}"`Close()`>${7}
snippet link
	<link rel="${1:stylesheet}" href="${2:/css/master.css}" type="text/css" media="${3:screen}" charset="utf-8"`Close()`>${4}
snippet mailto
	<a href="mailto:${1:joe@example.com}?subject=${2:feedback}">${3:email me}</a>
snippet meta
	<meta name="${1:name}" content="${2:content}"`Close()`>${3}
snippet opt
	<option value="${1:option}">${2:$1}</option>${3}
snippet optt
	<option>${1:option}</option>${2}
snippet select
	<select name="${1:some_name}" id="${2:$1}">
		<option value="${3:option}">${4:$3}</option>
	</select>${5}
snippet table
	<table border="${1:0}">
		<tr><th>${2:Header}</th></tr>
		<tr><th>${3:Data}</th></tr>
	</table>${4}
snippet textarea
	<textarea name="${1:Name}" rows="${2:8}" cols="${3:40}">${4}</textarea>${5}

#ezTemplates
snippet fetch content node
	fetch('content', 'node', hash( 'node_id', ${1:NodeId} )${2}
snippet fetch content list
	fetch( content, list, hash( 'parent_node_id', ${1:NodeId},
				    'class_filter_type', ${2:include},
				    'class_filter_array', array( ${3} ),
				    'offset', $view_parameters.offset,
				    'limit', ${4} ) )
snippet fetch content list with sort
	fetch( content, list, hash( 'parent_node_id', ${1:NodeId},
				    'class_filter_type', ${2:include},
				    'class_filter_array', array( ${3} ),
				    'sort_by', array( ${4} ),
				    'offset', $view_parameters.offset,
				    'limit', ${5} ) )
snippet fetch content list with attribute filter
	fetch( content, list, hash( 'parent_node_id', ${1:NodeId},
				    'class_filter_type', ${2:include},
				    'class_filter_array', array( ${3} ),
				    'attribute_filter', array( ${4} ),
				    'offset', $view_parameters.offset,
				    'limit', ${5} ) )
snippet fetch content list with attribute filter and sort
	fetch( content, list, hash( 'parent_node_id', ${1:NodeId},
				    'class_filter_type', ${2:include},
				    'class_filter_array', array( ${3} ),
				    'sort_by', array( ${4} ),
				    'attribute_filter', array( ${5} ),
				    'offset', $view_parameters.offset,
				    'limit', ${6} ) )
snippet fetch content list_count
	fetch( content, list_count, hash( 'parent_node_id', ${1:NodeId},
					  'class_filter_type', ${2:include},
					  'class_filter_array', array( ${3} ),
					  'offset', $view_parameters.offset,
					  'limit', ${4} ) )
snippet fetch content list_count with attribute filter
	fetch( content, list_count, hash( 'parent_node_id', ${1:NodeId},
				          'class_filter_type', ${2:include},
				          'class_filter_array', array( ${3} ),
				          'attribute_filter', array( ${4} ),
				          'offset', $view_parameters.offset,
				          'limit', ${5} ) )
snippet fetch content tree
	fetch( content, tree, hash( 'parent_node_id', ${1:NodeId},
				    'class_filter_type', ${2:include},
				    'class_filter_array', array( ${3} ),
				    'offset', $view_parameters.offset,
				    'limit', ${4} ) )
snippet fetch content tree with sort
	fetch( content, tree, hash( 'parent_node_id', ${1:NodeId},
				    'class_filter_type', ${2:include},
				    'class_filter_array', array( ${3} ),
				    'sort_by', array( ${4} ),
				    'offset', $view_parameters.offset,
				    'limit', ${5} ) )
snippet fetch content tree with attribute filter
	fetch( content, tree, hash( 'parent_node_id', ${1:NodeId},
				    'class_filter_type', ${2:include},
				    'class_filter_array', array( ${3} ),
				    'attribute_filter', array( ${4} ),
				    'offset', $view_parameters.offset,
				    'limit', ${5} ) )
snippet fetch content tree with attribute filter and sort
	fetch( content, tree, hash( 'parent_node_id', ${1:NodeId},
				    'class_filter_type', ${2:include},
				    'class_filter_array', array( ${3} ),
				    'sort_by', array( ${4} ),
				    'attribute_filter', array( ${5} ),
				    'offset', $view_parameters.offset,
				    'limit', ${6} ) )
snippet fetch content tree_count
	fetch( content, tree_count, hash( 'parent_node_id', ${1:NodeId},
					  'offset', $view_parameters.offset,
					  'limit', ${4} ) )
snippet fetch content tree_count with attribute filter
	fetch( content, tree_count, hash( 'parent_node_id', ${1:NodeId},
				          'attribute_filter', array( ${4} ),
				          'offset', $view_parameters.offset,
				          'limit', ${5} ) )
snippet ezini
	ezini( '${1:section}', '${2:variable}', '${3:ini_file}')
snippet attr
	${1:var}|attribute('show'${2:, 2})
snippet fore foreach simple
	{foreach ${1:array} as ${2:itemVar}}
	    ${3}
	{/foreach}
snippet fore foreach avec clé
	{foreach ${1:array} as ${2:key} => ${3:itemVar}}
	    ${4}
	{/foreach}
snippet fore foreach avec clé et séquence
	{foreach ${1:array} as ${2:key} => ${3:itemVar}
	         sequence ${4:array} as ${5:sequenceVar}}
	    ${6}
	{/foreach}
snippet fore foreach avec clé, séquence et délimiteur
	{foreach ${1:array} as ${2:key} => ${3:itemVar}
	         sequence ${4:array} as ${5:sequenceVar}}
	    ${7}
	    {delimiter}${6}{/delimiter}
	{/foreach}
snippet if if
	{if ${1:condition}}
	    ${2}
	{/if}
snippet if if else
	{if ${1:condition}}
	    ${2}
	{else}
	    ${3}
	{/if}
snippet if if elseif else
	{if ${1:condition}}
	    ${2}
	{elseif}
	    ${3}
	{else}
	    ${4}
	{/if}
snippet i18n
	{'${1:source}'|i18n('${2:context}')}
snippet gui attribute_view_gui
	{attribute_view_gui attribute=${1:attribute}}
snippet gui attribute_edit_gui
	{attribute_edit_gui attribute=${1:attribute}}
snippet gui node_view_gui
	{node_view_gui content_node=${1:node} view=${2:view_mode}}




