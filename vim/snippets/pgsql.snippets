snippet function
	--
	-- function: $1
	--
	-- Arguments:
	--
	CREATE OR REPLACE FUNCTION ${1:function_name}(
		    ${2:argument} ${3:arg_type}
		) RETURNS ${4:type} AS $${5:ME}$
		    DECLARE
			-- Declare variable here
		    BEGIN
			${7:query}
			RETURN 1;
		    END;
		$$5$ LANGUAGE 'plpgsql';

	COMMENT ON FUNCTION $1($3) IS '${6:This function is used to ...}';
snippet begin standard
	BEGIN
	    ${1:query}
	END;
snippet begin exception
	BEGIN
	    ${1:query}
	EXCEPTION
	    ${2:WHEN}
	END;
snippet varchar
	character varying(${1:64})
#
# Define control structure 
# http://www.postgresql.org/docs/8.4/static/plpgsql-control-structures.html
#
# RETURN
snippet return alone
	RETURN ${1:expression};
snippet return next
	RETURN NEXT ${1:expression};
snippet return query
	RETURN QUERY ${1:query};
# IF
snippet if IF-THEN
	IF ${1:boolean-expression} THEN
	    ${2:statements};
	END IF;
snippet if IF-THEN-ELSE-END
	IF ${1:boolean-expression} THEN
	    ${2:statements};
	ELSE
	    ${3:statements};
	END IF;
snippet if IF-THEN-ELSIF-END
	IF ${1:vars} ${2:=} ${3:vals} THEN
	    ${4:statements};
	ELSIF $1 ${5:=} ${6:vals} THEN
	    ${7:statements};
	END IF;
snippet if NOT FOUND
	IF NOT FOUND THEN
	    ${1:query};
	END IF;
snippet if val IS NOT NULL
	IF ${1:value} IS NOT NULL THEN
	    ${2:query};
	END IF;
snippet elsif
	ELSIF ${1:vars} ${2:=} ${3:vals} THEN
snippet loop
	LOOP
	    ${1:query};
	END LOOP;
snippet exit
	EXIT;
#
# Define comment on each object
#
snippet comment table
	COMMENT ON TABLE ${1:table} IS '${2:comment}';
snippet comment column
	COMMENT ON COLUMN ${1:table.column} IS '${2:comment}';
#
# Standard query
#
snippet select select-from
	SELECT ${1:field} FROM ${2:table} WHERE ${3:field} ${4:=} ${5:value};
snippet select select-into-from
	SELECT ${1:field} INTO ${2:var} FROM ${3:table} WHERE ${4:field} ${5:=} ${6:value};
#
# complement for standard query
#
snippet and
	AND ${1:field} ${2:=} ${3:value}
snippet or
	OR ${1:field} ${2:=} ${3:value}
snippet orderby
	ORDER BY ${1:field}
snippet groupby
	GROUP BY ${1:field}
